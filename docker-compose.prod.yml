version: '3.8'

services:
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql-prod
      - DB_PORT=3306
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}
      - REDIS_HOST=redis-prod
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - COOKIE_SECRET=${COOKIE_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW=900000
      - DDOS_MAX_REQUESTS=1000
      - DDOS_TIME_WINDOW=60000
      - HTTPS_ONLY=true
      - SECURE_COOKIES=true
    depends_on:
      - redis-prod
      - mysql-prod
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend-main-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${API_URL}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_APP_TYPE=main
    networks:
      - prod-network
    restart: unless-stopped

  frontend-diamond-prod:
    build:
      context: ./frontend-diamond
      dockerfile: Dockerfile
      target: production
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_URL=${API_URL}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_APP_TYPE=diamond
    networks:
      - prod-network
    restart: unless-stopped

  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - backend-prod
      - frontend-main-prod
      - frontend-diamond-prod
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.ip_local_port_range=1024 65535
    ulimits:
      nofile:
        soft: 65535
        hard: 65535

  redis-prod:
    image: redis:7-alpine
    volumes:
      - redis-prod-data:/data
    networks:
      - prod-network
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  mysql-prod:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # Security hardening
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      - mysql-prod-data:/var/lib/mysql
      - ./backend/scripts:/docker-entrypoint-initdb.d
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    networks:
      - prod-network
    restart: unless-stopped
    command: >
      mysqld 
      --default-authentication-plugin=mysql_native_password
      --bind-address=0.0.0.0
      --skip-name-resolve
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --query-cache-type=0
      --query-cache-size=0
      --log-error=/var/log/mysql/error.log
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  redis-prod-data:
  mysql-prod-data:
  nginx-cache:
  nginx-logs:

networks:
  prod-network:
    driver: bridge
